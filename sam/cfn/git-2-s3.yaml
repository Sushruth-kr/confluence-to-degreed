AWSTemplateFormatVersion: '2010-09-09'


Transform: 'AWS::Serverless-2016-10-31'


Description: 'Git-2-S3 Stack'


Parameters:

  AllowedIps:
    Default: '132.188.0.0/16'  # This is where requests from git.autodesk.com will come from.
    Description: 'gitpull method only. Comma seperated list of IP CIDR blocks for source IP authentication. The Autodesk external IP range is provided as default.'
    Type: String

  GitRepoName:
    Description: 'Git repository name'
    Type: String

  Subnets:
    Description: 'Subnets where the Lambda function will reside in the VPC, e.g. the Application subnets'
    Type: List<AWS::EC2::Subnet::Id>

  VpcId:
    Description: 'VPC Id'
    Type: AWS::EC2::VPC::Id


Conditions:

  UseAllowedIps:
    Fn::Not:
    - Fn::Equals:
      - Ref: AllowedIps
      - ''

  SendUsageData: !Equals [ !FindInMap ['UsageData', 'Data', 'SendUsageData'], true ]


Mappings:

  # The usage data collected is for the DES Tools Team to provide us with some
  # statistics on who is using our solutions. The data we are collecting is:
  # AWS account Id, stack ARN, SolutionId and the Version.
  # For more info: https://git.autodesk.com/AWS-Deployment-Tools/cfn-usage-data
  UsageData:
    Data:
      APIEndpoint: 'https://cfn-usage-data-api.engineering-services.autodesk.com'
      SolutionId: 1  # internal solutionId used to distinguish between solutions
      Version: 1  # the version of the solution
      SendUsageData: true  # set to 'false' if you do not want to send usage data


Resources:

  KeyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group to attach to Lambda functions deployed in VPC. No rules needed - this is created only because it is a required property with VPC Lambdas.
      VpcId: !Ref VpcId

  CreateSSHKey:
    Type: Custom::CreateSSHKey
    Properties:
      KMSKey: !Ref KMSKey
      KeyBucket: !Ref KeyBucket
      Region: !Ref AWS::Region
      ServiceToken: !GetAtt CreateSSHKeyLambda.Arn

  CreateSSHKeyLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/CreateSSHKey.zip
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole # Managed Policy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource:
                - !Sub 'arn:aws:s3:::${KeyBucket}/crypto.zip'
            - Action:
                - s3:PutObject
              Effect: Allow
              Resource:
                - !Sub 'arn:aws:s3:::${KeyBucket}/enc_key'
            - Action:
                - kms:Encrypt
              Effect: Allow
              Resource:
                - '*'
      Runtime: python2.7
      Timeout: 300

  S3BucketCleanerKeyBucket:
    Type: Custom::S3BucketCleanerKeyBucket
    Properties:
      ServiceToken: !GetAtt S3BucketCleanupLambdaFunction.Arn
      S3Bucket: !Ref KeyBucket

  S3BucketCleanerOutputBucket:
    Type: Custom::S3BucketCleanerOutputBucket
    Properties:
      ServiceToken: !GetAtt S3BucketCleanupLambdaFunction.Arn
      S3Bucket: !Ref OutputBucket

  S3BucketCleanupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/s3-bucket-cleanup
      Description: Funciton to cleanup an s3 bucket (objects and versions)
      Handler: s3-bucket-cleanup.lambda_handler
      Runtime: python3.7
      Timeout: 300
      Policies:
        - AWSLambdaBasicExecutionRole # Managed Policy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action: s3:*
              Resource: # We apply this to BOTH all objects within the bucket AND the bucket itself
                - !Sub '${KeyBucket.Arn}/*'
                - !GetAtt KeyBucket.Arn
                - !Sub '${OutputBucket.Arn}/*'
                - !GetAtt OutputBucket.Arn
      Layers:
        - !Ref LayerCfnResponse

  GitPullLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../functions/GitPullS3.zip
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Policies:
        - AWSLambdaVPCAccessExecutionRole # Managed Policy
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Action:
                - kms:Decrypt
              Effect: Allow
              Resource:
                - '*'
            - Action:
                - s3:PutObject
              Effect: Allow
              Resource:
                - arn:aws:s3:::*
                - arn:aws:s3:::*/*
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource:
                - !Sub 'arn:aws:s3:::${KeyBucket}/enc_key'
      Runtime: python2.7
      Timeout: 300
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref Subnets

  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Git CodePipeline integration, bucket to store ssh keys
      KeyPolicy:
        Statement:
          - Action:
            - kms:Create*
            - kms:Describe*
            - kms:Enable*
            - kms:List*
            - kms:Put*
            - kms:Update*
            - kms:Revoke*
            - kms:Disable*
            - kms:Get*
            - kms:Delete*
            - kms:ScheduleKeyDeletion
            - kms:CancelKeyDeletion
            Effect: Allow
            Principal:
              AWS:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
            Sid: Allow access for Key Administrators
          - Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
            Effect: Allow
            Principal:
              AWS:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
            Sid: Allow use of the key
          - Action:
            - kms:CreateGrant
            - kms:ListGrants
            - kms:RevokeGrant
            Condition:
              Bool:
                kms:GrantIsForAWSResource: true
            Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: '*'
            Sid: Allow attachment of persistent resources
        Version: '2012-10-17'

  WebHookApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: '2.0'
        info:
          version: '2016-07-26T07:34:38Z'
          title: !Join ['', [G2CP-, !Ref 'AWS::StackName']]
        schemes:
          - https
        paths:
          /gitpull:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                type: aws
                credentials: !GetAtt WebHookRole.Arn
                responses:
                  default:
                    statusCode: '200'
                requestParameters:
                  integration.request.header.X-Amz-Invocation-Type: '''Event'''
                passthroughBehavior: when_no_templates
                httpMethod: POST
                uri: !Join ['', ['arn:aws:apigateway:', !Ref 'AWS::Region', ':lambda:path//2015-03-31/functions/',
                    !GetAtt [GitPullLambda, Arn], /invocations]]
                requestTemplates:
                  application/json:
                    Fn::Sub: |
                      #set($allParams = $input.params())
                      {
                      "body-json" : $input.json('$'),
                      "params" : {
                      #foreach($type in $allParams.keySet())
                          #set($params = $allParams.get($type))
                      "$type" : {
                          #foreach($paramName in $params.keySet())
                          "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                              #if($foreach.hasNext),#end
                          #end
                      }
                          #if($foreach.hasNext),#end
                      #end
                      },
                      "stage-variables" : {
                      #foreach($key in $stageVariables.keySet())
                      "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                          #if($foreach.hasNext),#end
                      #end
                      },
                      "context" : {
                          "account-id" : "$context.identity.accountId",
                          "api-id" : "$context.apiId",
                          "api-key" : "$context.identity.apiKey",
                          "authorizer-principal-id" : "$context.authorizer.principalId",
                          "caller" : "$context.identity.caller",
                          "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                          "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                          "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                          "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                          "http-method" : "$context.httpMethod",
                          "stage" : "$context.stage",
                          "source-ip" : "$context.identity.sourceIp",
                          "user" : "$context.identity.user",
                          "user-agent" : "$context.identity.userAgent",
                          "user-arn" : "$context.identity.userArn",
                          "request-id" : "$context.requestId",
                          "resource-id" : "$context.resourceId",
                          "resource-path" : "$context.resourcePath",
                          "allowed-ips" : "$stageVariables.allowedips",
                          "api-secrets" : "",
                          "key-bucket" : "${KeyBucket}",
                          "output-bucket" : "$stageVariables.outputbucket",
                          "public-key" : "${CreateSSHKey}",
                          "raw-body" : "$util.escapeJavaScript($input.body).replaceAll("\\'","'")"
                          }
                      }
        securityDefinitions:
          sigv4:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: awsSigv4
        definitions:
          Empty:
            type: object

  WebHookApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref WebHookApi
      StageName: DummyStage

  WebHookApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref 'WebHookApiDeployment'
      RestApiId: !Ref 'WebHookApi'
      StageName: Prod
      Variables:
        allowedips:
          Fn::If:
            - UseAllowedIps
            - Ref: AllowedIps
            - Ref: AWS::NoValue
        outputbucket:
          Ref: OutputBucket

  WebHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-WebHookRole'
          PolicyDocument:
            Statement:
              - Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Effect: Allow
                Resource:
                  - !GetAtt GitPullLambda.Arn

  LayerCfnResponse:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: cfnresponse
      Description: Python to handle a cfn response for cfn custom resources
      ContentUri: ../layers/cfnresponse
      CompatibleRuntimes:
        - python3.6
        - python3.7
      RetentionPolicy: Delete

  # TODO: Move this to the serverless application repository
  UsageDataCustom:
    Type: Custom::UsageDataCustom
    Condition: SendUsageData
    Properties:
      ServiceToken: !GetAtt UsageDataFunction.Arn
      AwsAccountId: !Ref AWS::AccountId
      APIEndpoint: !FindInMap ['UsageData', 'Data', 'APIEndpoint']
      SolutionId: !FindInMap ['UsageData', 'Data', 'SolutionId']
      StackId: !Ref AWS::StackId
      Version: !FindInMap ['UsageData', 'Data', 'Version']

  UsageDataFunction:
    Type: AWS::Serverless::Function
    Condition: SendUsageData
    Properties:
      Description: >
        This function calls the usage data api
      Handler: send-usage-data.lambda_handler
      Runtime: python3.7
      CodeUri: ../functions/send-usage-data
      Timeout: 300
      Policies:
        - AWSLambdaBasicExecutionRole # Managed Policy
      Layers:
        - !Ref LayerCfnResponse


Outputs:
  GitPullWebHookApi:
    Description: 'GitPullWebHookApi URL'
    Value: !Sub 'https://${WebHookApi}.execute-api.${AWS::Region}.amazonaws.com/${WebHookApiProdStage}/gitpull'
    Export:
      Name: !Sub '${AWS::StackName}-GitPullWebHookApi'

  GitRepoName:
    Description: 'The git repo name that will kick off the pipeline when commited to'
    Value: !Ref 'GitRepoName'
    Export:
      Name: !Sub '${AWS::StackName}-GitRepoName'

  OutputBucketName:
    Description: 'OutputBucket name'
    Value: !Ref 'OutputBucket'
    Export:
      Name: !Sub '${AWS::StackName}-OutputBucketName'

  PublicSSHKey:
    Description: 'Content of the public SSH key. Add it to the list of deploy keys in your Github repo.'
    Value: !Ref 'CreateSSHKey'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSSHKey'
