@startuml
autonumber 10 10 "<b>[000]"

"CloudWatch Event" as cwe -> "Confluence-to-Wiki Step Function" as step: Periodic (expecting daily, but periodicity is adjustable) event kicks off content load function
step -> "listSpaces Lambda" as ls_lwf: execute "Spaces" Workflow
ls_lwf -> step: "Return list of spaces from either config param or dynamoDB table"
loop "for every space key"
  step -> "spaceHandler Lambda" as sh_lwf: run spaceHandler for space key
  sh_lwf -> "Confluence API" as confapi: pull all pages (link and metadata) from space
  sh_lwf -> "S3 Bucket" as s3bucket: upload space results as CSV (spaces/<spacekey>.csv)
  sh_lwf -> "Athena DB" as athena: create "wiki_spaces" table
end

step -> "degreedHandler Lambda" as degreed_lwf: Execute Degreed Workflow
degreed_lwf -> "Degreed API" as degreedapi: Read all wiki pages in degreed catalog
degreed_lwf -> s3bucket: upload results as CSV (degreed/articles.csv)
degreed_lwf -> athena: create "degreed_articles" table

step -> "generateContentFile Lambda" as content_lwf: execute content upload workflow
content_lwf->athena: select degreed_articles that do **not** have a match in wiki_spaces, to create a list of "to be deleted" articles
content_lwf->athena: select degreed_articles that do have a match in wiki_spaces, to create a list of "update" articles
content_lwf->athena: select wiki_spaces pages that do not show up in degreed, to create a list of "new" articles
content_lwf->content_lwf: merge lists to create content upload file
content_lwf->degreedapi: upload content upload file
content_lwf->athena: find list of wiki pages marked for deletion that are in one or more pathways
content_lwf->step: pass list of pathways, creators for the pathways and the urls that are marked for deletion to the next step

step -> "emailNotify Lambda" as email_notify: take deleted url/pathway/creator list as input
loop "for each URL/Pathway/Creator Tuplet"
  email_notify-> "SendGrid" as sendgrid: Send email to creator letting them know that content in their pathway is "disappearing"
  email_notify ->step: Success!
end
@enduml