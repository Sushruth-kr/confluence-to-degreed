#!/bin/bash -e
# This script will deploy the git2s3 stack
# Example usage: deploy/git-2-s3.sh -n your-stack-name -e dev
# To delete a stack: aws cloudformation delete-stack --stack-name your-stack-name

while getopts :n:e: option; do
  case "${option}" in
    n)
      STACK_NAME=${OPTARG}
    ;;
    e)
      ENVIRONMENT=${OPTARG}
    ;;
    \?)
      echo "Usage: deploy/git-2-s3.sh [-n STACK_NAME] [-e ENVIRONMENT]"
      exit 1
    ;;
  esac
done

if [ "$STACK_NAME" == "" ]; then
  STACK_NAME="git-pull-conf2degreed"
fi

# If env not set, default to dev
if [ "$ENVIRONMENT" == "" ]; then
  ENVIRONMENT=dev
fi

echo "STACK_NAME: $STACK_NAME"
echo "ENVIRONMENT: $ENVIRONMENT"

# Set variables. Set paths relative to the root.
SERVICE_NAME='YOUR_SERVICE_NAME'
AWS_ACCOUNT=$(aws sts get-caller-identity --query "Account" --output text)

#Get AWS Region if not set. TODO: investigate why `aws configure get region` doesn't work properly in CodeBuild; however, it sets $AWS_REGION, so we can leverage that for now.
if [ -z "$AWS_REGION" ]; then
    AWS_REGION=$(aws configure get region)
    if [ -z $AWS_REGION ]; then
        echo "ERROR: AWS_REGION not set"
        exit 1
    fi
else
    AWS_REGION="$AWS_REGION"
fi
echo "AWS_REGION: ${AWS_REGION}"

S3_PREFIX=${STACK_NAME}
DEPLOY_BUCKET=deploy-${AWS_ACCOUNT}-${AWS_REGION}
CFN_TEMPLATE_FILE=sam/cfn/git-2-s3.yaml
OUTPUT_CFN_TEMPLATE_FILE=${CFN_TEMPLATE_FILE}.tmp

# set tags for the stack, these tags will be propogated to all resources that support tags.
# Specify your tags as "key=value".
# Note: These are temporary params (used as placeholders).
TAG_ADSK_MONIKER="adsk:moniker=${SERVICE_NAME}-${ENVIRONMENT}-${AWS_REGION}"
TAG_ADSK_SERVICE="adsk:service=${SERVICE_NAME}-${ENVIRONMENT}-${AWS_REGION}"
TAG_ADSK_ENVIRONMENT="adsk:environment=${ENVIRONMENT}"

# Set some cfn stack parameter overrides here

# this is the git repo that will start the pipeline when new commits occur
GIT_REPO_NAME='dpe/confluence-to-degreed'
echo "GitRepoName: $GIT_REPO_NAME"

# We need to know if the AWS account was generated by Alfred or Tailor
# becasue the auto discovery of resources (ex: Vpc_id, Subnets, NAT Gateway EIP's, etc... ) differs between accounts.
VPC_GENERATED_BY='Alfred'  # Service used to generate AWS account ('Alfred' or 'Tailor')
IS_VPC_ALFRED_GENERATED=$(aws ec2 describe-vpcs \
  --filters Name=tag:generated-by,Values="$VPC_GENERATED_BY"  \
  --query "Vpcs[0].VpcId" \
  --output text)
if [ "$IS_VPC_ALFRED_GENERATED" == "None" ]; then
  VPC_GENERATED_BY='Tailor'
fi
echo "VPC generated by: $VPC_GENERATED_BY"

# Get the core networking info
VPC_ID=''
SUBNETS=''
if [ "$VPC_GENERATED_BY" == "Alfred" ]; then
  VPC_ID=$(aws ec2 describe-vpcs \
  --filters "Name=tag:generated-by,Values=Alfred"   \
  --query "Vpcs[0].VpcId" \
  --output text)
  SUBNETS=$(aws ec2 describe-subnets \
  --filters Name=vpc-id,Values=$VPC_ID Name=tag:Name,Values=*private* \
  --query "Subnets[*].SubnetId" \
  --output text | sed -e "s/\s/,/g")
else
  VPC_ID=$(aws ec2 describe-vpcs \
  --filters Name=tag:aws:cloudformation:stack-name,Values=core \
  --query "Vpcs[0].VpcId" \
  --output text)
  SUBNETS=$(aws ec2 describe-subnets \
  --filters Name=vpc-id,Values=$VPC_ID Name=tag:Name,Values=application \
  --query "Subnets[*].SubnetId" \
  --output text | perl -pe 's/\s/,/g; chop();')
fi
echo "VpcId: $VPC_ID"
echo "Subnets: $SUBNETS"

# If not present, create S3 buckets for deployment support files.
aws s3api get-bucket-location \
--bucket ${DEPLOY_BUCKET} 2>&1 >/dev/null \
|| aws s3 mb \
--region $AWS_REGION \
s3://${DEPLOY_BUCKET} 2>&1 >/dev/null

# install sam function/layer requirements
THIS_SCRIPT=$(realpath  $0)
THIS_SCRIPTPATH=$(dirname ${THIS_SCRIPT})
${THIS_SCRIPTPATH}/install_requirements.sh

# Prepare CloudFormation package
echo "Packaging deployment artifacts for template..."
aws cloudformation package \
--template-file ${CFN_TEMPLATE_FILE} \
--output-template-file ${OUTPUT_CFN_TEMPLATE_FILE} \
--s3-bucket $DEPLOY_BUCKET \
--s3-prefix ${S3_PREFIX}

# Deploy CloudFormation stack
echo "Deploying to stack ${STACK_NAME}..."
aws cloudformation deploy \
--template-file ${OUTPUT_CFN_TEMPLATE_FILE} \
--role-arn arn:aws:iam::${AWS_ACCOUNT}:role/AdskCfnAdministratorAccessExecutionRole \
--capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
--s3-bucket $DEPLOY_BUCKET \
--s3-prefix ${S3_PREFIX} \
--stack-name ${STACK_NAME} \
--tags \
${TAG_ADSK_MONIKER} \
${TAG_ADSK_SERVICE} \
${TAG_ADSK_ENVIRONMENT} \
--parameter-overrides \
GitRepoName=${GIT_REPO_NAME} \
Subnets=${SUBNETS} \
VpcId=${VPC_ID}

# Clean-up tmp files
rm -f ${OUTPUT_CFN_TEMPLATE_FILE}

GitPullWebHookApi=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='GitPullWebHookApi'].[OutputValue]" --output text) \
|| exit 1  # bail out if deploy fails
PublicSSHKey=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='PublicSSHKey'].[OutputValue]" --output text) \
|| exit 1  # bail out if deploy fails
echo "API is available at $GitPullWebHookApi"
echo "Public SSH key to add to your Github repo: $PublicSSHKey"
echo "Deploy Complete - Git-2-S3 stack: ${STACK_NAME}"
